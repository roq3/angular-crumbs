{"version":3,"sources":["../src/breadcrumb.service.ts"],"names":[],"mappings":"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","file":"breadcrumb.service.js","sourceRoot":"","sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { Router, ActivatedRouteSnapshot, Event, NavigationEnd } from '@angular/router';\n\nimport { Breadcrumb } from './breadcrumb';\n\n\nexport class BreadcrumbService {\n    breadcrumbChanged = new EventEmitter<Breadcrumb[]>(false);\n\n    private breadcrumbs = new Array<Breadcrumb>();\n\n    constructor(private router: Router) {\n        this.router.events.subscribe((routeEvent) => { this.onRouteEvent(routeEvent); });\n    }\n\n    public changeBreadcrumb(route: ActivatedRouteSnapshot, name: string) {\n        const rootUrl = this.createRootUrl(route);\n        const breadcrumb = this.breadcrumbs.find(function (bc) { return bc.url === rootUrl; });\n\n        if (!breadcrumb) { return; }\n\n        breadcrumb.displayName = name;\n\n        this.breadcrumbChanged.emit(this.breadcrumbs);\n    }\n\n    private onRouteEvent(routeEvent: Event) {\n        if (!(routeEvent instanceof NavigationEnd)) { return; }\n\n        let route = this.router.routerState.root.snapshot;\n        let url = '';\n\n        var breadCrumbIndex = 0;\n        var newCrumbs = [];\n\n        while (route.firstChild != null) {\n            route = route.firstChild;\n\n            if (route.routeConfig === null) { continue; }\n            if (!route.routeConfig.path) { continue; }\n\n            url += `/${this.createUrl(route)}`;\n\n            if (!route.data['breadcrumb']) { continue; }\n\n            var newCrumb = this.createBreadcrumb(route, url)\n\n            if (breadCrumbIndex < this.breadcrumbs.length) {\n              var existing = this.breadcrumbs[breadCrumbIndex++];\n\n              if (existing && existing.route == route.routeConfig) {\n                newCrumb.displayName = existing.displayName;\n              }\n            }\n\n            newCrumbs.push(newCrumb);\n        }\n\n        this.breadcrumbs = newCrumbs;\n        this.breadcrumbChanged.emit(this.breadcrumbs);\n    }\n\n    private createBreadcrumb(route: ActivatedRouteSnapshot, url: string): Breadcrumb {\n        return {\n            displayName: route.data['breadcrumb'],\n            terminal: this.isTerminal(route),\n            url: url,\n            route: route.routeConfig\n        }\n    }\n\n    private isTerminal(route: ActivatedRouteSnapshot) {\n        return route.firstChild === null\n            || route.firstChild.routeConfig === null\n            || !route.firstChild.routeConfig.path;\n    }\n\n    private createUrl(route: ActivatedRouteSnapshot) {\n        return route.url.map(function (s) { return s.toString(); }).join('/');\n    }\n\n    private createRootUrl(route: ActivatedRouteSnapshot) {\n        let url = '';\n        let next = route.root;\n\n        while (next.firstChild !== null) {\n            next = next.firstChild;\n\n            if (next.routeConfig === null) { continue; }\n            if (!next.routeConfig.path) { continue; }\n\n            url += `/${this.createUrl(next)}`;\n\n            if (next === route) { break; }\n        }\n\n        return url;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Router, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}